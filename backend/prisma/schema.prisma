datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  engineType    = "library"
}



model User {
  id             Int       @id @default(autoincrement())
  username       String    @unique @db.VarChar(30)
  email          String    @unique @db.VarChar(256)
  hashedPassword String    @db.VarChar(60)
  firstName      String
  lastName       String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @default(now())
  bookings       Booking[]
  reviews        Review[]
  spots          Spot[]
}

model Booking {
  id        Int      @id @default(autoincrement())
  spotId    Int
  userId    Int
  startDate DateTime @db.Date
  endDate   DateTime @db.Date
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  spot      Spot     @relation(fields: [spotId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Spot {
  id          Int         @id @default(autoincrement())
  ownerId     Int
  address     String
  city        String
  state       String
  country     String
  lat         Decimal
  lng         Decimal
  name        String
  description String
  price       Decimal
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now())
  bookings    Booking[]
  reviews     Review[]
  owner       User        @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  images      SpotImage[]
}

model SpotImage {
  id        Int      @id @default(autoincrement())
  spotId    Int
  url       String
  preview   Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  spot      Spot     @relation(fields: [spotId], references: [id], onDelete: Cascade)
}

model Review {
  id        Int           @id @default(autoincrement())
  spotId    Int
  userId    Int
  review    String
  stars     Int
  createdAt DateTime      @default(now())
  updatedAt DateTime      @default(now())
  spot      Spot          @relation(fields: [spotId], references: [id], onDelete: Cascade)
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  images    ReviewImage[]

  @@unique([userId, spotId])
}

model ReviewImage {
  id        Int      @id @default(autoincrement())
  reviewId  Int
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  review    Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
}
