generator client {
  provider      = "prisma-client-js"
  engineType    = "library"
}


datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id             Int        @id @default(autoincrement())
  username       String     @unique
  email          String     @unique
  hashedPassword String
  firstName      String
  lastName       String
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  spots          Spot[]     // User's spots
  reviews        Review[]   // User's reviews
  bookings       Booking[]  // User's bookings
  sessions       Session[]  // User's sessions
}

model Spot {
  id          Int         @id @default(autoincrement())
  ownerId     Int
  address     String
  city        String
  state       String
  country     String
  lat         Float
  lng         Float
  name        String
  description String
  price       Float
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  owner       User        @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  reviews     Review[]
  bookings    Booking[]
  images      SpotImage[]

  @@index([ownerId])
}

model Review {
  id        Int           @id @default(autoincrement())
  spotId    Int
  userId    Int
  review    String
  stars     Int
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  spot      Spot          @relation(fields: [spotId], references: [id], onDelete: Cascade)
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  images    ReviewImage[]

  @@index([spotId])
  @@index([userId])
}

model ReviewImage {
  id        Int      @id @default(autoincrement())
  reviewId  Int
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  review    Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)

  @@index([reviewId])
}

model SpotImage {
  id        Int      @id @default(autoincrement())
  spotId    Int
  url       String
  preview   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  spot      Spot     @relation(fields: [spotId], references: [id], onDelete: Cascade)

  @@index([spotId])
}

model Booking {
  id        Int      @id @default(autoincrement())
  spotId    Int
  userId    Int
  startDate DateTime
  endDate   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  spot      Spot     @relation(fields: [spotId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([spotId])
  @@index([userId])
}

model Session {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}
